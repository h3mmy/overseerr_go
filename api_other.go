/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OtherAPI interface {

	/*
	KeywordKeywordIdGet Get keyword

	Returns a single keyword in JSON format.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param keywordId
	@return OtherAPIKeywordKeywordIdGetRequest
	*/
	KeywordKeywordIdGet(ctx context.Context, keywordId float32) OtherAPIKeywordKeywordIdGetRequest

	// KeywordKeywordIdGetExecute executes the request
	//  @return Keyword
	KeywordKeywordIdGetExecute(r OtherAPIKeywordKeywordIdGetRequest) (*Keyword, *http.Response, error)

	/*
	WatchprovidersMoviesGet Get watch provider movies

	Returns a list of all available watch providers for movies.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OtherAPIWatchprovidersMoviesGetRequest
	*/
	WatchprovidersMoviesGet(ctx context.Context) OtherAPIWatchprovidersMoviesGetRequest

	// WatchprovidersMoviesGetExecute executes the request
	//  @return []WatchProviderDetails
	WatchprovidersMoviesGetExecute(r OtherAPIWatchprovidersMoviesGetRequest) ([]WatchProviderDetails, *http.Response, error)

	/*
	WatchprovidersRegionsGet Get watch provider regions

	Returns a list of all available watch provider regions.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OtherAPIWatchprovidersRegionsGetRequest
	*/
	WatchprovidersRegionsGet(ctx context.Context) OtherAPIWatchprovidersRegionsGetRequest

	// WatchprovidersRegionsGetExecute executes the request
	//  @return []WatchProviderRegion
	WatchprovidersRegionsGetExecute(r OtherAPIWatchprovidersRegionsGetRequest) ([]WatchProviderRegion, *http.Response, error)

	/*
	WatchprovidersTvGet Get watch provider series

	Returns a list of all available watch providers for series.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OtherAPIWatchprovidersTvGetRequest
	*/
	WatchprovidersTvGet(ctx context.Context) OtherAPIWatchprovidersTvGetRequest

	// WatchprovidersTvGetExecute executes the request
	//  @return []WatchProviderDetails
	WatchprovidersTvGetExecute(r OtherAPIWatchprovidersTvGetRequest) ([]WatchProviderDetails, *http.Response, error)
}

// OtherAPIService OtherAPI service
type OtherAPIService service

type OtherAPIKeywordKeywordIdGetRequest struct {
	ctx context.Context
	ApiService OtherAPI
	keywordId float32
}

func (r OtherAPIKeywordKeywordIdGetRequest) Execute() (*Keyword, *http.Response, error) {
	return r.ApiService.KeywordKeywordIdGetExecute(r)
}

/*
KeywordKeywordIdGet Get keyword

Returns a single keyword in JSON format.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param keywordId
 @return OtherAPIKeywordKeywordIdGetRequest
*/
func (a *OtherAPIService) KeywordKeywordIdGet(ctx context.Context, keywordId float32) OtherAPIKeywordKeywordIdGetRequest {
	return OtherAPIKeywordKeywordIdGetRequest{
		ApiService: a,
		ctx: ctx,
		keywordId: keywordId,
	}
}

// Execute executes the request
//  @return Keyword
func (a *OtherAPIService) KeywordKeywordIdGetExecute(r OtherAPIKeywordKeywordIdGetRequest) (*Keyword, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Keyword
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtherAPIService.KeywordKeywordIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keyword/{keywordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"keywordId"+"}", url.PathEscape(parameterValueToString(r.keywordId, "keywordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OtherAPIWatchprovidersMoviesGetRequest struct {
	ctx context.Context
	ApiService OtherAPI
	watchRegion *string
}

func (r OtherAPIWatchprovidersMoviesGetRequest) WatchRegion(watchRegion string) OtherAPIWatchprovidersMoviesGetRequest {
	r.watchRegion = &watchRegion
	return r
}

func (r OtherAPIWatchprovidersMoviesGetRequest) Execute() ([]WatchProviderDetails, *http.Response, error) {
	return r.ApiService.WatchprovidersMoviesGetExecute(r)
}

/*
WatchprovidersMoviesGet Get watch provider movies

Returns a list of all available watch providers for movies.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OtherAPIWatchprovidersMoviesGetRequest
*/
func (a *OtherAPIService) WatchprovidersMoviesGet(ctx context.Context) OtherAPIWatchprovidersMoviesGetRequest {
	return OtherAPIWatchprovidersMoviesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WatchProviderDetails
func (a *OtherAPIService) WatchprovidersMoviesGetExecute(r OtherAPIWatchprovidersMoviesGetRequest) ([]WatchProviderDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WatchProviderDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtherAPIService.WatchprovidersMoviesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watchproviders/movies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.watchRegion == nil {
		return localVarReturnValue, nil, reportError("watchRegion is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "watchRegion", r.watchRegion, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OtherAPIWatchprovidersRegionsGetRequest struct {
	ctx context.Context
	ApiService OtherAPI
}

func (r OtherAPIWatchprovidersRegionsGetRequest) Execute() ([]WatchProviderRegion, *http.Response, error) {
	return r.ApiService.WatchprovidersRegionsGetExecute(r)
}

/*
WatchprovidersRegionsGet Get watch provider regions

Returns a list of all available watch provider regions.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OtherAPIWatchprovidersRegionsGetRequest
*/
func (a *OtherAPIService) WatchprovidersRegionsGet(ctx context.Context) OtherAPIWatchprovidersRegionsGetRequest {
	return OtherAPIWatchprovidersRegionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WatchProviderRegion
func (a *OtherAPIService) WatchprovidersRegionsGetExecute(r OtherAPIWatchprovidersRegionsGetRequest) ([]WatchProviderRegion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WatchProviderRegion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtherAPIService.WatchprovidersRegionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watchproviders/regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OtherAPIWatchprovidersTvGetRequest struct {
	ctx context.Context
	ApiService OtherAPI
	watchRegion *string
}

func (r OtherAPIWatchprovidersTvGetRequest) WatchRegion(watchRegion string) OtherAPIWatchprovidersTvGetRequest {
	r.watchRegion = &watchRegion
	return r
}

func (r OtherAPIWatchprovidersTvGetRequest) Execute() ([]WatchProviderDetails, *http.Response, error) {
	return r.ApiService.WatchprovidersTvGetExecute(r)
}

/*
WatchprovidersTvGet Get watch provider series

Returns a list of all available watch providers for series.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OtherAPIWatchprovidersTvGetRequest
*/
func (a *OtherAPIService) WatchprovidersTvGet(ctx context.Context) OtherAPIWatchprovidersTvGetRequest {
	return OtherAPIWatchprovidersTvGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WatchProviderDetails
func (a *OtherAPIService) WatchprovidersTvGetExecute(r OtherAPIWatchprovidersTvGetRequest) ([]WatchProviderDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WatchProviderDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OtherAPIService.WatchprovidersTvGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/watchproviders/tv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.watchRegion == nil {
		return localVarReturnValue, nil, reportError("watchRegion is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "watchRegion", r.watchRegion, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
