/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type TvAPI interface {

	/*
	TvTvIdGet Get TV details

	Returns full TV details in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tvId
	@return TvAPITvTvIdGetRequest
	*/
	TvTvIdGet(ctx context.Context, tvId float32) TvAPITvTvIdGetRequest

	// TvTvIdGetExecute executes the request
	//  @return TvDetails
	TvTvIdGetExecute(r TvAPITvTvIdGetRequest) (*TvDetails, *http.Response, error)

	/*
	TvTvIdRatingsGet Get TV ratings

	Returns ratings based on provided tvId in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tvId
	@return TvAPITvTvIdRatingsGetRequest
	*/
	TvTvIdRatingsGet(ctx context.Context, tvId float32) TvAPITvTvIdRatingsGetRequest

	// TvTvIdRatingsGetExecute executes the request
	//  @return TvTvIdRatingsGet200Response
	TvTvIdRatingsGetExecute(r TvAPITvTvIdRatingsGetRequest) (*TvTvIdRatingsGet200Response, *http.Response, error)

	/*
	TvTvIdRecommendationsGet Get recommended TV series

	Returns list of recommended TV series based on the provided tvId in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tvId
	@return TvAPITvTvIdRecommendationsGetRequest
	*/
	TvTvIdRecommendationsGet(ctx context.Context, tvId float32) TvAPITvTvIdRecommendationsGetRequest

	// TvTvIdRecommendationsGetExecute executes the request
	//  @return DiscoverTvGet200Response
	TvTvIdRecommendationsGetExecute(r TvAPITvTvIdRecommendationsGetRequest) (*DiscoverTvGet200Response, *http.Response, error)

	/*
	TvTvIdSeasonSeasonIdGet Get season details and episode list

	Returns season details with a list of episodes in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tvId
	@param seasonId
	@return TvAPITvTvIdSeasonSeasonIdGetRequest
	*/
	TvTvIdSeasonSeasonIdGet(ctx context.Context, tvId float32, seasonId float32) TvAPITvTvIdSeasonSeasonIdGetRequest

	// TvTvIdSeasonSeasonIdGetExecute executes the request
	//  @return Season
	TvTvIdSeasonSeasonIdGetExecute(r TvAPITvTvIdSeasonSeasonIdGetRequest) (*Season, *http.Response, error)

	/*
	TvTvIdSimilarGet Get similar TV series

	Returns list of similar TV series based on the provided tvId in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tvId
	@return TvAPITvTvIdSimilarGetRequest
	*/
	TvTvIdSimilarGet(ctx context.Context, tvId float32) TvAPITvTvIdSimilarGetRequest

	// TvTvIdSimilarGetExecute executes the request
	//  @return DiscoverTvGet200Response
	TvTvIdSimilarGetExecute(r TvAPITvTvIdSimilarGetRequest) (*DiscoverTvGet200Response, *http.Response, error)
}

// TvAPIService TvAPI service
type TvAPIService service

type TvAPITvTvIdGetRequest struct {
	ctx context.Context
	ApiService TvAPI
	tvId float32
	language *string
}

func (r TvAPITvTvIdGetRequest) Language(language string) TvAPITvTvIdGetRequest {
	r.language = &language
	return r
}

func (r TvAPITvTvIdGetRequest) Execute() (*TvDetails, *http.Response, error) {
	return r.ApiService.TvTvIdGetExecute(r)
}

/*
TvTvIdGet Get TV details

Returns full TV details in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tvId
 @return TvAPITvTvIdGetRequest
*/
func (a *TvAPIService) TvTvIdGet(ctx context.Context, tvId float32) TvAPITvTvIdGetRequest {
	return TvAPITvTvIdGetRequest{
		ApiService: a,
		ctx: ctx,
		tvId: tvId,
	}
}

// Execute executes the request
//  @return TvDetails
func (a *TvAPIService) TvTvIdGetExecute(r TvAPITvTvIdGetRequest) (*TvDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TvDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvAPIService.TvTvIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tv/{tvId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tvId"+"}", url.PathEscape(parameterValueToString(r.tvId, "tvId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TvAPITvTvIdRatingsGetRequest struct {
	ctx context.Context
	ApiService TvAPI
	tvId float32
}

func (r TvAPITvTvIdRatingsGetRequest) Execute() (*TvTvIdRatingsGet200Response, *http.Response, error) {
	return r.ApiService.TvTvIdRatingsGetExecute(r)
}

/*
TvTvIdRatingsGet Get TV ratings

Returns ratings based on provided tvId in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tvId
 @return TvAPITvTvIdRatingsGetRequest
*/
func (a *TvAPIService) TvTvIdRatingsGet(ctx context.Context, tvId float32) TvAPITvTvIdRatingsGetRequest {
	return TvAPITvTvIdRatingsGetRequest{
		ApiService: a,
		ctx: ctx,
		tvId: tvId,
	}
}

// Execute executes the request
//  @return TvTvIdRatingsGet200Response
func (a *TvAPIService) TvTvIdRatingsGetExecute(r TvAPITvTvIdRatingsGetRequest) (*TvTvIdRatingsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TvTvIdRatingsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvAPIService.TvTvIdRatingsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tv/{tvId}/ratings"
	localVarPath = strings.Replace(localVarPath, "{"+"tvId"+"}", url.PathEscape(parameterValueToString(r.tvId, "tvId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TvAPITvTvIdRecommendationsGetRequest struct {
	ctx context.Context
	ApiService TvAPI
	tvId float32
	page *float32
	language *string
}

func (r TvAPITvTvIdRecommendationsGetRequest) Page(page float32) TvAPITvTvIdRecommendationsGetRequest {
	r.page = &page
	return r
}

func (r TvAPITvTvIdRecommendationsGetRequest) Language(language string) TvAPITvTvIdRecommendationsGetRequest {
	r.language = &language
	return r
}

func (r TvAPITvTvIdRecommendationsGetRequest) Execute() (*DiscoverTvGet200Response, *http.Response, error) {
	return r.ApiService.TvTvIdRecommendationsGetExecute(r)
}

/*
TvTvIdRecommendationsGet Get recommended TV series

Returns list of recommended TV series based on the provided tvId in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tvId
 @return TvAPITvTvIdRecommendationsGetRequest
*/
func (a *TvAPIService) TvTvIdRecommendationsGet(ctx context.Context, tvId float32) TvAPITvTvIdRecommendationsGetRequest {
	return TvAPITvTvIdRecommendationsGetRequest{
		ApiService: a,
		ctx: ctx,
		tvId: tvId,
	}
}

// Execute executes the request
//  @return DiscoverTvGet200Response
func (a *TvAPIService) TvTvIdRecommendationsGetExecute(r TvAPITvTvIdRecommendationsGetRequest) (*DiscoverTvGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscoverTvGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvAPIService.TvTvIdRecommendationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tv/{tvId}/recommendations"
	localVarPath = strings.Replace(localVarPath, "{"+"tvId"+"}", url.PathEscape(parameterValueToString(r.tvId, "tvId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue float32 = 1
		r.page = &defaultValue
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TvAPITvTvIdSeasonSeasonIdGetRequest struct {
	ctx context.Context
	ApiService TvAPI
	tvId float32
	seasonId float32
	language *string
}

func (r TvAPITvTvIdSeasonSeasonIdGetRequest) Language(language string) TvAPITvTvIdSeasonSeasonIdGetRequest {
	r.language = &language
	return r
}

func (r TvAPITvTvIdSeasonSeasonIdGetRequest) Execute() (*Season, *http.Response, error) {
	return r.ApiService.TvTvIdSeasonSeasonIdGetExecute(r)
}

/*
TvTvIdSeasonSeasonIdGet Get season details and episode list

Returns season details with a list of episodes in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tvId
 @param seasonId
 @return TvAPITvTvIdSeasonSeasonIdGetRequest
*/
func (a *TvAPIService) TvTvIdSeasonSeasonIdGet(ctx context.Context, tvId float32, seasonId float32) TvAPITvTvIdSeasonSeasonIdGetRequest {
	return TvAPITvTvIdSeasonSeasonIdGetRequest{
		ApiService: a,
		ctx: ctx,
		tvId: tvId,
		seasonId: seasonId,
	}
}

// Execute executes the request
//  @return Season
func (a *TvAPIService) TvTvIdSeasonSeasonIdGetExecute(r TvAPITvTvIdSeasonSeasonIdGetRequest) (*Season, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Season
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvAPIService.TvTvIdSeasonSeasonIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tv/{tvId}/season/{seasonId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tvId"+"}", url.PathEscape(parameterValueToString(r.tvId, "tvId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"seasonId"+"}", url.PathEscape(parameterValueToString(r.seasonId, "seasonId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TvAPITvTvIdSimilarGetRequest struct {
	ctx context.Context
	ApiService TvAPI
	tvId float32
	page *float32
	language *string
}

func (r TvAPITvTvIdSimilarGetRequest) Page(page float32) TvAPITvTvIdSimilarGetRequest {
	r.page = &page
	return r
}

func (r TvAPITvTvIdSimilarGetRequest) Language(language string) TvAPITvTvIdSimilarGetRequest {
	r.language = &language
	return r
}

func (r TvAPITvTvIdSimilarGetRequest) Execute() (*DiscoverTvGet200Response, *http.Response, error) {
	return r.ApiService.TvTvIdSimilarGetExecute(r)
}

/*
TvTvIdSimilarGet Get similar TV series

Returns list of similar TV series based on the provided tvId in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tvId
 @return TvAPITvTvIdSimilarGetRequest
*/
func (a *TvAPIService) TvTvIdSimilarGet(ctx context.Context, tvId float32) TvAPITvTvIdSimilarGetRequest {
	return TvAPITvTvIdSimilarGetRequest{
		ApiService: a,
		ctx: ctx,
		tvId: tvId,
	}
}

// Execute executes the request
//  @return DiscoverTvGet200Response
func (a *TvAPIService) TvTvIdSimilarGetExecute(r TvAPITvTvIdSimilarGetRequest) (*DiscoverTvGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscoverTvGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TvAPIService.TvTvIdSimilarGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tv/{tvId}/similar"
	localVarPath = strings.Replace(localVarPath, "{"+"tvId"+"}", url.PathEscape(parameterValueToString(r.tvId, "tvId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue float32 = 1
		r.page = &defaultValue
	}
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
