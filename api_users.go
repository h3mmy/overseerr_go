/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type UsersAPI interface {

	/*
	AuthMeGet Get logged-in user

	Returns the currently logged-in user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIAuthMeGetRequest
	*/
	AuthMeGet(ctx context.Context) UsersAPIAuthMeGetRequest

	// AuthMeGetExecute executes the request
	//  @return User
	AuthMeGetExecute(r UsersAPIAuthMeGetRequest) (*User, *http.Response, error)

	/*
	AuthResetPasswordGuidPost Reset the password for a user

	Resets the password for a user if the given guid is connected to a user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param guid
	@return UsersAPIAuthResetPasswordGuidPostRequest
	*/
	AuthResetPasswordGuidPost(ctx context.Context, guid string) UsersAPIAuthResetPasswordGuidPostRequest

	// AuthResetPasswordGuidPostExecute executes the request
	//  @return AuthLogoutPost200Response
	AuthResetPasswordGuidPostExecute(r UsersAPIAuthResetPasswordGuidPostRequest) (*AuthLogoutPost200Response, *http.Response, error)

	/*
	AuthResetPasswordPost Send a reset password email

	Sends a reset password email to the email if the user exists

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIAuthResetPasswordPostRequest
	*/
	AuthResetPasswordPost(ctx context.Context) UsersAPIAuthResetPasswordPostRequest

	// AuthResetPasswordPostExecute executes the request
	//  @return AuthLogoutPost200Response
	AuthResetPasswordPostExecute(r UsersAPIAuthResetPasswordPostRequest) (*AuthLogoutPost200Response, *http.Response, error)

	/*
	SettingsPlexUsersGet Get Plex users

	Returns a list of Plex users in a JSON array.

Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPISettingsPlexUsersGetRequest
	*/
	SettingsPlexUsersGet(ctx context.Context) UsersAPISettingsPlexUsersGetRequest

	// SettingsPlexUsersGetExecute executes the request
	//  @return []SettingsPlexUsersGet200ResponseInner
	SettingsPlexUsersGetExecute(r UsersAPISettingsPlexUsersGetRequest) ([]SettingsPlexUsersGet200ResponseInner, *http.Response, error)

	/*
	UserGet Get all users

	Returns all users in a JSON object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIUserGetRequest
	*/
	UserGet(ctx context.Context) UsersAPIUserGetRequest

	// UserGetExecute executes the request
	//  @return UserGet200Response
	UserGetExecute(r UsersAPIUserGetRequest) (*UserGet200Response, *http.Response, error)

	/*
	UserImportFromPlexPost Import all users from Plex

	Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.

Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIUserImportFromPlexPostRequest
	*/
	UserImportFromPlexPost(ctx context.Context) UsersAPIUserImportFromPlexPostRequest

	// UserImportFromPlexPostExecute executes the request
	//  @return []User
	UserImportFromPlexPostExecute(r UsersAPIUserImportFromPlexPostRequest) ([]User, *http.Response, error)

	/*
	UserPost Create new user

	Creates a new user. Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIUserPostRequest
	*/
	UserPost(ctx context.Context) UsersAPIUserPostRequest

	// UserPostExecute executes the request
	//  @return User
	UserPostExecute(r UsersAPIUserPostRequest) (*User, *http.Response, error)

	/*
	UserPut Update batch of users

	Update users with given IDs with provided values in request `body.settings`. You cannot update users' Plex tokens through this request.

Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIUserPutRequest
	*/
	UserPut(ctx context.Context) UsersAPIUserPutRequest

	// UserPutExecute executes the request
	//  @return []User
	UserPutExecute(r UsersAPIUserPutRequest) ([]User, *http.Response, error)

	/*
	UserRegisterPushSubscriptionPost Register a web push /user/registerPushSubscription

	Registers a web push subscription for the logged-in user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UsersAPIUserRegisterPushSubscriptionPostRequest
	*/
	UserRegisterPushSubscriptionPost(ctx context.Context) UsersAPIUserRegisterPushSubscriptionPostRequest

	// UserRegisterPushSubscriptionPostExecute executes the request
	UserRegisterPushSubscriptionPostExecute(r UsersAPIUserRegisterPushSubscriptionPostRequest) (*http.Response, error)

	/*
	UserUserIdDelete Delete user by ID

	Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdDeleteRequest
	*/
	UserUserIdDelete(ctx context.Context, userId float32) UsersAPIUserUserIdDeleteRequest

	// UserUserIdDeleteExecute executes the request
	//  @return User
	UserUserIdDeleteExecute(r UsersAPIUserUserIdDeleteRequest) (*User, *http.Response, error)

	/*
	UserUserIdGet Get user by ID

	Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdGetRequest
	*/
	UserUserIdGet(ctx context.Context, userId float32) UsersAPIUserUserIdGetRequest

	// UserUserIdGetExecute executes the request
	//  @return User
	UserUserIdGetExecute(r UsersAPIUserUserIdGetRequest) (*User, *http.Response, error)

	/*
	UserUserIdPut Update a user by user ID

	Update a user with the provided values. You cannot update a user's Plex token through this request.

Requires the `MANAGE_USERS` permission.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdPutRequest
	*/
	UserUserIdPut(ctx context.Context, userId float32) UsersAPIUserUserIdPutRequest

	// UserUserIdPutExecute executes the request
	//  @return User
	UserUserIdPutExecute(r UsersAPIUserUserIdPutRequest) (*User, *http.Response, error)

	/*
	UserUserIdQuotaGet Get quotas for a specific user

	Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdQuotaGetRequest
	*/
	UserUserIdQuotaGet(ctx context.Context, userId float32) UsersAPIUserUserIdQuotaGetRequest

	// UserUserIdQuotaGetExecute executes the request
	//  @return UserUserIdQuotaGet200Response
	UserUserIdQuotaGetExecute(r UsersAPIUserUserIdQuotaGetRequest) (*UserUserIdQuotaGet200Response, *http.Response, error)

	/*
	UserUserIdRequestsGet Get requests for a specific user

	Retrieves a user's requests in a JSON object.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdRequestsGetRequest
	*/
	UserUserIdRequestsGet(ctx context.Context, userId float32) UsersAPIUserUserIdRequestsGetRequest

	// UserUserIdRequestsGetExecute executes the request
	//  @return UserUserIdRequestsGet200Response
	UserUserIdRequestsGetExecute(r UsersAPIUserUserIdRequestsGetRequest) (*UserUserIdRequestsGet200Response, *http.Response, error)

	/*
	UserUserIdSettingsMainGet Get general settings for a user

	Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsMainGetRequest
	*/
	UserUserIdSettingsMainGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsMainGetRequest

	// UserUserIdSettingsMainGetExecute executes the request
	//  @return UserUserIdSettingsMainGet200Response
	UserUserIdSettingsMainGetExecute(r UsersAPIUserUserIdSettingsMainGetRequest) (*UserUserIdSettingsMainGet200Response, *http.Response, error)

	/*
	UserUserIdSettingsMainPost Update general settings for a user

	Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsMainPostRequest
	*/
	UserUserIdSettingsMainPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsMainPostRequest

	// UserUserIdSettingsMainPostExecute executes the request
	//  @return UserUserIdSettingsMainGet200Response
	UserUserIdSettingsMainPostExecute(r UsersAPIUserUserIdSettingsMainPostRequest) (*UserUserIdSettingsMainGet200Response, *http.Response, error)

	/*
	UserUserIdSettingsNotificationsGet Get notification settings for a user

	Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsNotificationsGetRequest
	*/
	UserUserIdSettingsNotificationsGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsNotificationsGetRequest

	// UserUserIdSettingsNotificationsGetExecute executes the request
	//  @return UserSettingsNotifications
	UserUserIdSettingsNotificationsGetExecute(r UsersAPIUserUserIdSettingsNotificationsGetRequest) (*UserSettingsNotifications, *http.Response, error)

	/*
	UserUserIdSettingsNotificationsPost Update notification settings for a user

	Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsNotificationsPostRequest
	*/
	UserUserIdSettingsNotificationsPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsNotificationsPostRequest

	// UserUserIdSettingsNotificationsPostExecute executes the request
	//  @return UserSettingsNotifications
	UserUserIdSettingsNotificationsPostExecute(r UsersAPIUserUserIdSettingsNotificationsPostRequest) (*UserSettingsNotifications, *http.Response, error)

	/*
	UserUserIdSettingsPasswordGet Get password page informatiom

	Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsPasswordGetRequest
	*/
	UserUserIdSettingsPasswordGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPasswordGetRequest

	// UserUserIdSettingsPasswordGetExecute executes the request
	//  @return UserUserIdSettingsPasswordGet200Response
	UserUserIdSettingsPasswordGetExecute(r UsersAPIUserUserIdSettingsPasswordGetRequest) (*UserUserIdSettingsPasswordGet200Response, *http.Response, error)

	/*
	UserUserIdSettingsPasswordPost Update password for a user

	Updates a user's password. Requires `MANAGE_USERS` permission if editing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsPasswordPostRequest
	*/
	UserUserIdSettingsPasswordPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPasswordPostRequest

	// UserUserIdSettingsPasswordPostExecute executes the request
	UserUserIdSettingsPasswordPostExecute(r UsersAPIUserUserIdSettingsPasswordPostRequest) (*http.Response, error)

	/*
	UserUserIdSettingsPermissionsGet Get permission settings for a user

	Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsPermissionsGetRequest
	*/
	UserUserIdSettingsPermissionsGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPermissionsGetRequest

	// UserUserIdSettingsPermissionsGetExecute executes the request
	//  @return UserUserIdSettingsPermissionsGet200Response
	UserUserIdSettingsPermissionsGetExecute(r UsersAPIUserUserIdSettingsPermissionsGetRequest) (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error)

	/*
	UserUserIdSettingsPermissionsPost Update permission settings for a user

	Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdSettingsPermissionsPostRequest
	*/
	UserUserIdSettingsPermissionsPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPermissionsPostRequest

	// UserUserIdSettingsPermissionsPostExecute executes the request
	//  @return UserUserIdSettingsPermissionsGet200Response
	UserUserIdSettingsPermissionsPostExecute(r UsersAPIUserUserIdSettingsPermissionsPostRequest) (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error)

	/*
	UserUserIdWatchDataGet Get watch data

	Returns play count, play duration, and recently watched media.

Requires the `ADMIN` permission to fetch results for other users.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdWatchDataGetRequest
	*/
	UserUserIdWatchDataGet(ctx context.Context, userId float32) UsersAPIUserUserIdWatchDataGetRequest

	// UserUserIdWatchDataGetExecute executes the request
	//  @return UserUserIdWatchDataGet200Response
	UserUserIdWatchDataGetExecute(r UsersAPIUserUserIdWatchDataGetRequest) (*UserUserIdWatchDataGet200Response, *http.Response, error)

	/*
	UserUserIdWatchlistGet Get the Plex watchlist for a specific user

	Retrieves a user's Plex Watchlist in a JSON object.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return UsersAPIUserUserIdWatchlistGetRequest
	*/
	UserUserIdWatchlistGet(ctx context.Context, userId float32) UsersAPIUserUserIdWatchlistGetRequest

	// UserUserIdWatchlistGetExecute executes the request
	//  @return UserUserIdWatchlistGet200Response
	UserUserIdWatchlistGetExecute(r UsersAPIUserUserIdWatchlistGetRequest) (*UserUserIdWatchlistGet200Response, *http.Response, error)
}

// UsersAPIService UsersAPI service
type UsersAPIService service

type UsersAPIAuthMeGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
}

func (r UsersAPIAuthMeGetRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.AuthMeGetExecute(r)
}

/*
AuthMeGet Get logged-in user

Returns the currently logged-in user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIAuthMeGetRequest
*/
func (a *UsersAPIService) AuthMeGet(ctx context.Context) UsersAPIAuthMeGetRequest {
	return UsersAPIAuthMeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return User
func (a *UsersAPIService) AuthMeGetExecute(r UsersAPIAuthMeGetRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.AuthMeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/me"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIAuthResetPasswordGuidPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	guid string
	authResetPasswordGuidPostRequest *AuthResetPasswordGuidPostRequest
}

func (r UsersAPIAuthResetPasswordGuidPostRequest) AuthResetPasswordGuidPostRequest(authResetPasswordGuidPostRequest AuthResetPasswordGuidPostRequest) UsersAPIAuthResetPasswordGuidPostRequest {
	r.authResetPasswordGuidPostRequest = &authResetPasswordGuidPostRequest
	return r
}

func (r UsersAPIAuthResetPasswordGuidPostRequest) Execute() (*AuthLogoutPost200Response, *http.Response, error) {
	return r.ApiService.AuthResetPasswordGuidPostExecute(r)
}

/*
AuthResetPasswordGuidPost Reset the password for a user

Resets the password for a user if the given guid is connected to a user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param guid
 @return UsersAPIAuthResetPasswordGuidPostRequest
*/
func (a *UsersAPIService) AuthResetPasswordGuidPost(ctx context.Context, guid string) UsersAPIAuthResetPasswordGuidPostRequest {
	return UsersAPIAuthResetPasswordGuidPostRequest{
		ApiService: a,
		ctx: ctx,
		guid: guid,
	}
}

// Execute executes the request
//  @return AuthLogoutPost200Response
func (a *UsersAPIService) AuthResetPasswordGuidPostExecute(r UsersAPIAuthResetPasswordGuidPostRequest) (*AuthLogoutPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthLogoutPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.AuthResetPasswordGuidPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/reset-password/{guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"guid"+"}", url.PathEscape(parameterValueToString(r.guid, "guid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authResetPasswordGuidPostRequest == nil {
		return localVarReturnValue, nil, reportError("authResetPasswordGuidPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authResetPasswordGuidPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIAuthResetPasswordPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	authResetPasswordPostRequest *AuthResetPasswordPostRequest
}

func (r UsersAPIAuthResetPasswordPostRequest) AuthResetPasswordPostRequest(authResetPasswordPostRequest AuthResetPasswordPostRequest) UsersAPIAuthResetPasswordPostRequest {
	r.authResetPasswordPostRequest = &authResetPasswordPostRequest
	return r
}

func (r UsersAPIAuthResetPasswordPostRequest) Execute() (*AuthLogoutPost200Response, *http.Response, error) {
	return r.ApiService.AuthResetPasswordPostExecute(r)
}

/*
AuthResetPasswordPost Send a reset password email

Sends a reset password email to the email if the user exists

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIAuthResetPasswordPostRequest
*/
func (a *UsersAPIService) AuthResetPasswordPost(ctx context.Context) UsersAPIAuthResetPasswordPostRequest {
	return UsersAPIAuthResetPasswordPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthLogoutPost200Response
func (a *UsersAPIService) AuthResetPasswordPostExecute(r UsersAPIAuthResetPasswordPostRequest) (*AuthLogoutPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthLogoutPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.AuthResetPasswordPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/reset-password"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authResetPasswordPostRequest == nil {
		return localVarReturnValue, nil, reportError("authResetPasswordPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authResetPasswordPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPISettingsPlexUsersGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
}

func (r UsersAPISettingsPlexUsersGetRequest) Execute() ([]SettingsPlexUsersGet200ResponseInner, *http.Response, error) {
	return r.ApiService.SettingsPlexUsersGetExecute(r)
}

/*
SettingsPlexUsersGet Get Plex users

Returns a list of Plex users in a JSON array.

Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPISettingsPlexUsersGetRequest
*/
func (a *UsersAPIService) SettingsPlexUsersGet(ctx context.Context) UsersAPISettingsPlexUsersGetRequest {
	return UsersAPISettingsPlexUsersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SettingsPlexUsersGet200ResponseInner
func (a *UsersAPIService) SettingsPlexUsersGetExecute(r UsersAPISettingsPlexUsersGetRequest) ([]SettingsPlexUsersGet200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SettingsPlexUsersGet200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.SettingsPlexUsersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settings/plex/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	take *float32
	skip *float32
	sort *string
}

func (r UsersAPIUserGetRequest) Take(take float32) UsersAPIUserGetRequest {
	r.take = &take
	return r
}

func (r UsersAPIUserGetRequest) Skip(skip float32) UsersAPIUserGetRequest {
	r.skip = &skip
	return r
}

func (r UsersAPIUserGetRequest) Sort(sort string) UsersAPIUserGetRequest {
	r.sort = &sort
	return r
}

func (r UsersAPIUserGetRequest) Execute() (*UserGet200Response, *http.Response, error) {
	return r.ApiService.UserGetExecute(r)
}

/*
UserGet Get all users

Returns all users in a JSON object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIUserGetRequest
*/
func (a *UsersAPIService) UserGet(ctx context.Context) UsersAPIUserGetRequest {
	return UsersAPIUserGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserGet200Response
func (a *UsersAPIService) UserGetExecute(r UsersAPIUserGetRequest) (*UserGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	} else {
		var defaultValue string = "created"
		r.sort = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserImportFromPlexPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userImportFromPlexPostRequest *UserImportFromPlexPostRequest
}

func (r UsersAPIUserImportFromPlexPostRequest) UserImportFromPlexPostRequest(userImportFromPlexPostRequest UserImportFromPlexPostRequest) UsersAPIUserImportFromPlexPostRequest {
	r.userImportFromPlexPostRequest = &userImportFromPlexPostRequest
	return r
}

func (r UsersAPIUserImportFromPlexPostRequest) Execute() ([]User, *http.Response, error) {
	return r.ApiService.UserImportFromPlexPostExecute(r)
}

/*
UserImportFromPlexPost Import all users from Plex

Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.

Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIUserImportFromPlexPostRequest
*/
func (a *UsersAPIService) UserImportFromPlexPost(ctx context.Context) UsersAPIUserImportFromPlexPostRequest {
	return UsersAPIUserImportFromPlexPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []User
func (a *UsersAPIService) UserImportFromPlexPostExecute(r UsersAPIUserImportFromPlexPostRequest) ([]User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserImportFromPlexPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/import-from-plex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userImportFromPlexPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userPostRequest *UserPostRequest
}

func (r UsersAPIUserPostRequest) UserPostRequest(userPostRequest UserPostRequest) UsersAPIUserPostRequest {
	r.userPostRequest = &userPostRequest
	return r
}

func (r UsersAPIUserPostRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.UserPostExecute(r)
}

/*
UserPost Create new user

Creates a new user. Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIUserPostRequest
*/
func (a *UsersAPIService) UserPost(ctx context.Context) UsersAPIUserPostRequest {
	return UsersAPIUserPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return User
func (a *UsersAPIService) UserPostExecute(r UsersAPIUserPostRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userPostRequest == nil {
		return localVarReturnValue, nil, reportError("userPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserPutRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userPutRequest *UserPutRequest
}

func (r UsersAPIUserPutRequest) UserPutRequest(userPutRequest UserPutRequest) UsersAPIUserPutRequest {
	r.userPutRequest = &userPutRequest
	return r
}

func (r UsersAPIUserPutRequest) Execute() ([]User, *http.Response, error) {
	return r.ApiService.UserPutExecute(r)
}

/*
UserPut Update batch of users

Update users with given IDs with provided values in request `body.settings`. You cannot update users' Plex tokens through this request.

Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIUserPutRequest
*/
func (a *UsersAPIService) UserPut(ctx context.Context) UsersAPIUserPutRequest {
	return UsersAPIUserPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []User
func (a *UsersAPIService) UserPutExecute(r UsersAPIUserPutRequest) ([]User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userPutRequest == nil {
		return localVarReturnValue, nil, reportError("userPutRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userPutRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserRegisterPushSubscriptionPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userRegisterPushSubscriptionPostRequest *UserRegisterPushSubscriptionPostRequest
}

func (r UsersAPIUserRegisterPushSubscriptionPostRequest) UserRegisterPushSubscriptionPostRequest(userRegisterPushSubscriptionPostRequest UserRegisterPushSubscriptionPostRequest) UsersAPIUserRegisterPushSubscriptionPostRequest {
	r.userRegisterPushSubscriptionPostRequest = &userRegisterPushSubscriptionPostRequest
	return r
}

func (r UsersAPIUserRegisterPushSubscriptionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.UserRegisterPushSubscriptionPostExecute(r)
}

/*
UserRegisterPushSubscriptionPost Register a web push /user/registerPushSubscription

Registers a web push subscription for the logged-in user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UsersAPIUserRegisterPushSubscriptionPostRequest
*/
func (a *UsersAPIService) UserRegisterPushSubscriptionPost(ctx context.Context) UsersAPIUserRegisterPushSubscriptionPostRequest {
	return UsersAPIUserRegisterPushSubscriptionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UsersAPIService) UserRegisterPushSubscriptionPostExecute(r UsersAPIUserRegisterPushSubscriptionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserRegisterPushSubscriptionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/registerPushSubscription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userRegisterPushSubscriptionPostRequest == nil {
		return nil, reportError("userRegisterPushSubscriptionPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userRegisterPushSubscriptionPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UsersAPIUserUserIdDeleteRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdDeleteRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.UserUserIdDeleteExecute(r)
}

/*
UserUserIdDelete Delete user by ID

Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdDeleteRequest
*/
func (a *UsersAPIService) UserUserIdDelete(ctx context.Context, userId float32) UsersAPIUserUserIdDeleteRequest {
	return UsersAPIUserUserIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return User
func (a *UsersAPIService) UserUserIdDeleteExecute(r UsersAPIUserUserIdDeleteRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdGetRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.UserUserIdGetExecute(r)
}

/*
UserUserIdGet Get user by ID

Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdGetRequest
*/
func (a *UsersAPIService) UserUserIdGet(ctx context.Context, userId float32) UsersAPIUserUserIdGetRequest {
	return UsersAPIUserUserIdGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return User
func (a *UsersAPIService) UserUserIdGetExecute(r UsersAPIUserUserIdGetRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdPutRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	user *User
}

func (r UsersAPIUserUserIdPutRequest) User(user User) UsersAPIUserUserIdPutRequest {
	r.user = &user
	return r
}

func (r UsersAPIUserUserIdPutRequest) Execute() (*User, *http.Response, error) {
	return r.ApiService.UserUserIdPutExecute(r)
}

/*
UserUserIdPut Update a user by user ID

Update a user with the provided values. You cannot update a user's Plex token through this request.

Requires the `MANAGE_USERS` permission.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdPutRequest
*/
func (a *UsersAPIService) UserUserIdPut(ctx context.Context, userId float32) UsersAPIUserUserIdPutRequest {
	return UsersAPIUserUserIdPutRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return User
func (a *UsersAPIService) UserUserIdPutExecute(r UsersAPIUserUserIdPutRequest) (*User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.user == nil {
		return localVarReturnValue, nil, reportError("user is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.user
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdQuotaGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdQuotaGetRequest) Execute() (*UserUserIdQuotaGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdQuotaGetExecute(r)
}

/*
UserUserIdQuotaGet Get quotas for a specific user

Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdQuotaGetRequest
*/
func (a *UsersAPIService) UserUserIdQuotaGet(ctx context.Context, userId float32) UsersAPIUserUserIdQuotaGetRequest {
	return UsersAPIUserUserIdQuotaGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdQuotaGet200Response
func (a *UsersAPIService) UserUserIdQuotaGetExecute(r UsersAPIUserUserIdQuotaGetRequest) (*UserUserIdQuotaGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdQuotaGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdQuotaGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/quota"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdRequestsGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	take *float32
	skip *float32
}

func (r UsersAPIUserUserIdRequestsGetRequest) Take(take float32) UsersAPIUserUserIdRequestsGetRequest {
	r.take = &take
	return r
}

func (r UsersAPIUserUserIdRequestsGetRequest) Skip(skip float32) UsersAPIUserUserIdRequestsGetRequest {
	r.skip = &skip
	return r
}

func (r UsersAPIUserUserIdRequestsGetRequest) Execute() (*UserUserIdRequestsGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdRequestsGetExecute(r)
}

/*
UserUserIdRequestsGet Get requests for a specific user

Retrieves a user's requests in a JSON object.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdRequestsGetRequest
*/
func (a *UsersAPIService) UserUserIdRequestsGet(ctx context.Context, userId float32) UsersAPIUserUserIdRequestsGetRequest {
	return UsersAPIUserUserIdRequestsGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdRequestsGet200Response
func (a *UsersAPIService) UserUserIdRequestsGetExecute(r UsersAPIUserUserIdRequestsGetRequest) (*UserUserIdRequestsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdRequestsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdRequestsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/requests"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "")
	}
	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsMainGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdSettingsMainGetRequest) Execute() (*UserUserIdSettingsMainGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsMainGetExecute(r)
}

/*
UserUserIdSettingsMainGet Get general settings for a user

Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsMainGetRequest
*/
func (a *UsersAPIService) UserUserIdSettingsMainGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsMainGetRequest {
	return UsersAPIUserUserIdSettingsMainGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdSettingsMainGet200Response
func (a *UsersAPIService) UserUserIdSettingsMainGetExecute(r UsersAPIUserUserIdSettingsMainGetRequest) (*UserUserIdSettingsMainGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdSettingsMainGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsMainGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/main"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsMainPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	userUserIdSettingsMainPostRequest *UserUserIdSettingsMainPostRequest
}

func (r UsersAPIUserUserIdSettingsMainPostRequest) UserUserIdSettingsMainPostRequest(userUserIdSettingsMainPostRequest UserUserIdSettingsMainPostRequest) UsersAPIUserUserIdSettingsMainPostRequest {
	r.userUserIdSettingsMainPostRequest = &userUserIdSettingsMainPostRequest
	return r
}

func (r UsersAPIUserUserIdSettingsMainPostRequest) Execute() (*UserUserIdSettingsMainGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsMainPostExecute(r)
}

/*
UserUserIdSettingsMainPost Update general settings for a user

Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsMainPostRequest
*/
func (a *UsersAPIService) UserUserIdSettingsMainPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsMainPostRequest {
	return UsersAPIUserUserIdSettingsMainPostRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdSettingsMainGet200Response
func (a *UsersAPIService) UserUserIdSettingsMainPostExecute(r UsersAPIUserUserIdSettingsMainPostRequest) (*UserUserIdSettingsMainGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdSettingsMainGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsMainPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/main"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userUserIdSettingsMainPostRequest == nil {
		return localVarReturnValue, nil, reportError("userUserIdSettingsMainPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userUserIdSettingsMainPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsNotificationsGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdSettingsNotificationsGetRequest) Execute() (*UserSettingsNotifications, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsNotificationsGetExecute(r)
}

/*
UserUserIdSettingsNotificationsGet Get notification settings for a user

Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsNotificationsGetRequest
*/
func (a *UsersAPIService) UserUserIdSettingsNotificationsGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsNotificationsGetRequest {
	return UsersAPIUserUserIdSettingsNotificationsGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserSettingsNotifications
func (a *UsersAPIService) UserUserIdSettingsNotificationsGetExecute(r UsersAPIUserUserIdSettingsNotificationsGetRequest) (*UserSettingsNotifications, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSettingsNotifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsNotificationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsNotificationsPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	userSettingsNotifications *UserSettingsNotifications
}

func (r UsersAPIUserUserIdSettingsNotificationsPostRequest) UserSettingsNotifications(userSettingsNotifications UserSettingsNotifications) UsersAPIUserUserIdSettingsNotificationsPostRequest {
	r.userSettingsNotifications = &userSettingsNotifications
	return r
}

func (r UsersAPIUserUserIdSettingsNotificationsPostRequest) Execute() (*UserSettingsNotifications, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsNotificationsPostExecute(r)
}

/*
UserUserIdSettingsNotificationsPost Update notification settings for a user

Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsNotificationsPostRequest
*/
func (a *UsersAPIService) UserUserIdSettingsNotificationsPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsNotificationsPostRequest {
	return UsersAPIUserUserIdSettingsNotificationsPostRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserSettingsNotifications
func (a *UsersAPIService) UserUserIdSettingsNotificationsPostExecute(r UsersAPIUserUserIdSettingsNotificationsPostRequest) (*UserSettingsNotifications, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserSettingsNotifications
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsNotificationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userSettingsNotifications == nil {
		return localVarReturnValue, nil, reportError("userSettingsNotifications is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userSettingsNotifications
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsPasswordGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdSettingsPasswordGetRequest) Execute() (*UserUserIdSettingsPasswordGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsPasswordGetExecute(r)
}

/*
UserUserIdSettingsPasswordGet Get password page informatiom

Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsPasswordGetRequest
*/
func (a *UsersAPIService) UserUserIdSettingsPasswordGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPasswordGetRequest {
	return UsersAPIUserUserIdSettingsPasswordGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdSettingsPasswordGet200Response
func (a *UsersAPIService) UserUserIdSettingsPasswordGetExecute(r UsersAPIUserUserIdSettingsPasswordGetRequest) (*UserUserIdSettingsPasswordGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdSettingsPasswordGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsPasswordGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/password"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsPasswordPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	userUserIdSettingsPasswordPostRequest *UserUserIdSettingsPasswordPostRequest
}

func (r UsersAPIUserUserIdSettingsPasswordPostRequest) UserUserIdSettingsPasswordPostRequest(userUserIdSettingsPasswordPostRequest UserUserIdSettingsPasswordPostRequest) UsersAPIUserUserIdSettingsPasswordPostRequest {
	r.userUserIdSettingsPasswordPostRequest = &userUserIdSettingsPasswordPostRequest
	return r
}

func (r UsersAPIUserUserIdSettingsPasswordPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.UserUserIdSettingsPasswordPostExecute(r)
}

/*
UserUserIdSettingsPasswordPost Update password for a user

Updates a user's password. Requires `MANAGE_USERS` permission if editing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsPasswordPostRequest
*/
func (a *UsersAPIService) UserUserIdSettingsPasswordPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPasswordPostRequest {
	return UsersAPIUserUserIdSettingsPasswordPostRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersAPIService) UserUserIdSettingsPasswordPostExecute(r UsersAPIUserUserIdSettingsPasswordPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsPasswordPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/password"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userUserIdSettingsPasswordPostRequest == nil {
		return nil, reportError("userUserIdSettingsPasswordPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userUserIdSettingsPasswordPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsPermissionsGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdSettingsPermissionsGetRequest) Execute() (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsPermissionsGetExecute(r)
}

/*
UserUserIdSettingsPermissionsGet Get permission settings for a user

Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsPermissionsGetRequest
*/
func (a *UsersAPIService) UserUserIdSettingsPermissionsGet(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPermissionsGetRequest {
	return UsersAPIUserUserIdSettingsPermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdSettingsPermissionsGet200Response
func (a *UsersAPIService) UserUserIdSettingsPermissionsGetExecute(r UsersAPIUserUserIdSettingsPermissionsGetRequest) (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdSettingsPermissionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdSettingsPermissionsPostRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	userUserIdSettingsPermissionsPostRequest *UserUserIdSettingsPermissionsPostRequest
}

func (r UsersAPIUserUserIdSettingsPermissionsPostRequest) UserUserIdSettingsPermissionsPostRequest(userUserIdSettingsPermissionsPostRequest UserUserIdSettingsPermissionsPostRequest) UsersAPIUserUserIdSettingsPermissionsPostRequest {
	r.userUserIdSettingsPermissionsPostRequest = &userUserIdSettingsPermissionsPostRequest
	return r
}

func (r UsersAPIUserUserIdSettingsPermissionsPostRequest) Execute() (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdSettingsPermissionsPostExecute(r)
}

/*
UserUserIdSettingsPermissionsPost Update permission settings for a user

Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdSettingsPermissionsPostRequest
*/
func (a *UsersAPIService) UserUserIdSettingsPermissionsPost(ctx context.Context, userId float32) UsersAPIUserUserIdSettingsPermissionsPostRequest {
	return UsersAPIUserUserIdSettingsPermissionsPostRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdSettingsPermissionsGet200Response
func (a *UsersAPIService) UserUserIdSettingsPermissionsPostExecute(r UsersAPIUserUserIdSettingsPermissionsPostRequest) (*UserUserIdSettingsPermissionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdSettingsPermissionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdSettingsPermissionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/settings/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userUserIdSettingsPermissionsPostRequest == nil {
		return localVarReturnValue, nil, reportError("userUserIdSettingsPermissionsPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userUserIdSettingsPermissionsPostRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdWatchDataGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
}

func (r UsersAPIUserUserIdWatchDataGetRequest) Execute() (*UserUserIdWatchDataGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdWatchDataGetExecute(r)
}

/*
UserUserIdWatchDataGet Get watch data

Returns play count, play duration, and recently watched media.

Requires the `ADMIN` permission to fetch results for other users.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdWatchDataGetRequest
*/
func (a *UsersAPIService) UserUserIdWatchDataGet(ctx context.Context, userId float32) UsersAPIUserUserIdWatchDataGetRequest {
	return UsersAPIUserUserIdWatchDataGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdWatchDataGet200Response
func (a *UsersAPIService) UserUserIdWatchDataGetExecute(r UsersAPIUserUserIdWatchDataGetRequest) (*UserUserIdWatchDataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdWatchDataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdWatchDataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/watch_data"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UsersAPIUserUserIdWatchlistGetRequest struct {
	ctx context.Context
	ApiService UsersAPI
	userId float32
	page *float32
}

func (r UsersAPIUserUserIdWatchlistGetRequest) Page(page float32) UsersAPIUserUserIdWatchlistGetRequest {
	r.page = &page
	return r
}

func (r UsersAPIUserUserIdWatchlistGetRequest) Execute() (*UserUserIdWatchlistGet200Response, *http.Response, error) {
	return r.ApiService.UserUserIdWatchlistGetExecute(r)
}

/*
UserUserIdWatchlistGet Get the Plex watchlist for a specific user

Retrieves a user's Plex Watchlist in a JSON object.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return UsersAPIUserUserIdWatchlistGetRequest
*/
func (a *UsersAPIService) UserUserIdWatchlistGet(ctx context.Context, userId float32) UsersAPIUserUserIdWatchlistGetRequest {
	return UsersAPIUserUserIdWatchlistGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return UserUserIdWatchlistGet200Response
func (a *UsersAPIService) UserUserIdWatchlistGetExecute(r UsersAPIUserUserIdWatchlistGetRequest) (*UserUserIdWatchlistGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserUserIdWatchlistGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAPIService.UserUserIdWatchlistGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user/{userId}/watchlist"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue float32 = 1
		r.page = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
