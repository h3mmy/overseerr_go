/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SettingsRadarrTestPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsRadarrTestPost200Response{}

// SettingsRadarrTestPost200Response struct for SettingsRadarrTestPost200Response
type SettingsRadarrTestPost200Response struct {
	Profiles []ServiceProfile `json:"profiles,omitempty"`
}

// NewSettingsRadarrTestPost200Response instantiates a new SettingsRadarrTestPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsRadarrTestPost200Response() *SettingsRadarrTestPost200Response {
	this := SettingsRadarrTestPost200Response{}
	return &this
}

// NewSettingsRadarrTestPost200ResponseWithDefaults instantiates a new SettingsRadarrTestPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsRadarrTestPost200ResponseWithDefaults() *SettingsRadarrTestPost200Response {
	this := SettingsRadarrTestPost200Response{}
	return &this
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *SettingsRadarrTestPost200Response) GetProfiles() []ServiceProfile {
	if o == nil || IsNil(o.Profiles) {
		var ret []ServiceProfile
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsRadarrTestPost200Response) GetProfilesOk() ([]ServiceProfile, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *SettingsRadarrTestPost200Response) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []ServiceProfile and assigns it to the Profiles field.
func (o *SettingsRadarrTestPost200Response) SetProfiles(v []ServiceProfile) {
	o.Profiles = v
}

func (o SettingsRadarrTestPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsRadarrTestPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Profiles) {
		toSerialize["profiles"] = o.Profiles
	}
	return toSerialize, nil
}

type NullableSettingsRadarrTestPost200Response struct {
	value *SettingsRadarrTestPost200Response
	isSet bool
}

func (v NullableSettingsRadarrTestPost200Response) Get() *SettingsRadarrTestPost200Response {
	return v.value
}

func (v *NullableSettingsRadarrTestPost200Response) Set(val *SettingsRadarrTestPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsRadarrTestPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsRadarrTestPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsRadarrTestPost200Response(val *SettingsRadarrTestPost200Response) *NullableSettingsRadarrTestPost200Response {
	return &NullableSettingsRadarrTestPost200Response{value: val, isSet: true}
}

func (v NullableSettingsRadarrTestPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsRadarrTestPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


