/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserUserIdSettingsPermissionsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUserIdSettingsPermissionsPostRequest{}

// UserUserIdSettingsPermissionsPostRequest struct for UserUserIdSettingsPermissionsPostRequest
type UserUserIdSettingsPermissionsPostRequest struct {
	Permissions float32 `json:"permissions"`
}

type _UserUserIdSettingsPermissionsPostRequest UserUserIdSettingsPermissionsPostRequest

// NewUserUserIdSettingsPermissionsPostRequest instantiates a new UserUserIdSettingsPermissionsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUserIdSettingsPermissionsPostRequest(permissions float32) *UserUserIdSettingsPermissionsPostRequest {
	this := UserUserIdSettingsPermissionsPostRequest{}
	this.Permissions = permissions
	return &this
}

// NewUserUserIdSettingsPermissionsPostRequestWithDefaults instantiates a new UserUserIdSettingsPermissionsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUserIdSettingsPermissionsPostRequestWithDefaults() *UserUserIdSettingsPermissionsPostRequest {
	this := UserUserIdSettingsPermissionsPostRequest{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *UserUserIdSettingsPermissionsPostRequest) GetPermissions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *UserUserIdSettingsPermissionsPostRequest) GetPermissionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *UserUserIdSettingsPermissionsPostRequest) SetPermissions(v float32) {
	o.Permissions = v
}

func (o UserUserIdSettingsPermissionsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUserIdSettingsPermissionsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

func (o *UserUserIdSettingsPermissionsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUserIdSettingsPermissionsPostRequest := _UserUserIdSettingsPermissionsPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserUserIdSettingsPermissionsPostRequest)

	if err != nil {
		return err
	}

	*o = UserUserIdSettingsPermissionsPostRequest(varUserUserIdSettingsPermissionsPostRequest)

	return err
}

type NullableUserUserIdSettingsPermissionsPostRequest struct {
	value *UserUserIdSettingsPermissionsPostRequest
	isSet bool
}

func (v NullableUserUserIdSettingsPermissionsPostRequest) Get() *UserUserIdSettingsPermissionsPostRequest {
	return v.value
}

func (v *NullableUserUserIdSettingsPermissionsPostRequest) Set(val *UserUserIdSettingsPermissionsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUserIdSettingsPermissionsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUserIdSettingsPermissionsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUserIdSettingsPermissionsPostRequest(val *UserUserIdSettingsPermissionsPostRequest) *NullableUserUserIdSettingsPermissionsPostRequest {
	return &NullableUserUserIdSettingsPermissionsPostRequest{value: val, isSet: true}
}

func (v NullableUserUserIdSettingsPermissionsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUserIdSettingsPermissionsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


