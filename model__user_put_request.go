/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UserPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPutRequest{}

// UserPutRequest struct for UserPutRequest
type UserPutRequest struct {
	Ids []int32 `json:"ids,omitempty"`
	Permissions *int32 `json:"permissions,omitempty"`
}

// NewUserPutRequest instantiates a new UserPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPutRequest() *UserPutRequest {
	this := UserPutRequest{}
	return &this
}

// NewUserPutRequestWithDefaults instantiates a new UserPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPutRequestWithDefaults() *UserPutRequest {
	this := UserPutRequest{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *UserPutRequest) GetIds() []int32 {
	if o == nil || IsNil(o.Ids) {
		var ret []int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *UserPutRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *UserPutRequest) SetIds(v []int32) {
	o.Ids = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UserPutRequest) GetPermissions() int32 {
	if o == nil || IsNil(o.Permissions) {
		var ret int32
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPutRequest) GetPermissionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UserPutRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given int32 and assigns it to the Permissions field.
func (o *UserPutRequest) SetPermissions(v int32) {
	o.Permissions = &v
}

func (o UserPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableUserPutRequest struct {
	value *UserPutRequest
	isSet bool
}

func (v NullableUserPutRequest) Get() *UserPutRequest {
	return v.value
}

func (v *NullableUserPutRequest) Set(val *UserPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPutRequest(val *UserPutRequest) *NullableUserPutRequest {
	return &NullableUserPutRequest{value: val, isSet: true}
}

func (v NullableUserPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


