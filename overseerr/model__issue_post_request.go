/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"encoding/json"
)

// checks if the IssuePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuePostRequest{}

// IssuePostRequest struct for IssuePostRequest
type IssuePostRequest struct {
	IssueType *float32 `json:"issueType,omitempty"`
	Message *string `json:"message,omitempty"`
	MediaId *float32 `json:"mediaId,omitempty"`
}

// NewIssuePostRequest instantiates a new IssuePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuePostRequest() *IssuePostRequest {
	this := IssuePostRequest{}
	return &this
}

// NewIssuePostRequestWithDefaults instantiates a new IssuePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuePostRequestWithDefaults() *IssuePostRequest {
	this := IssuePostRequest{}
	return &this
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *IssuePostRequest) GetIssueType() float32 {
	if o == nil || IsNil(o.IssueType) {
		var ret float32
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuePostRequest) GetIssueTypeOk() (*float32, bool) {
	if o == nil || IsNil(o.IssueType) {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *IssuePostRequest) HasIssueType() bool {
	if o != nil && !IsNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given float32 and assigns it to the IssueType field.
func (o *IssuePostRequest) SetIssueType(v float32) {
	o.IssueType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IssuePostRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuePostRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IssuePostRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IssuePostRequest) SetMessage(v string) {
	o.Message = &v
}

// GetMediaId returns the MediaId field value if set, zero value otherwise.
func (o *IssuePostRequest) GetMediaId() float32 {
	if o == nil || IsNil(o.MediaId) {
		var ret float32
		return ret
	}
	return *o.MediaId
}

// GetMediaIdOk returns a tuple with the MediaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuePostRequest) GetMediaIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MediaId) {
		return nil, false
	}
	return o.MediaId, true
}

// HasMediaId returns a boolean if a field has been set.
func (o *IssuePostRequest) HasMediaId() bool {
	if o != nil && !IsNil(o.MediaId) {
		return true
	}

	return false
}

// SetMediaId gets a reference to the given float32 and assigns it to the MediaId field.
func (o *IssuePostRequest) SetMediaId(v float32) {
	o.MediaId = &v
}

func (o IssuePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssueType) {
		toSerialize["issueType"] = o.IssueType
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.MediaId) {
		toSerialize["mediaId"] = o.MediaId
	}
	return toSerialize, nil
}

type NullableIssuePostRequest struct {
	value *IssuePostRequest
	isSet bool
}

func (v NullableIssuePostRequest) Get() *IssuePostRequest {
	return v.value
}

func (v *NullableIssuePostRequest) Set(val *IssuePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuePostRequest(val *IssuePostRequest) *NullableIssuePostRequest {
	return &NullableIssuePostRequest{value: val, isSet: true}
}

func (v NullableIssuePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


