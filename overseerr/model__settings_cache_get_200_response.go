/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SettingsCacheGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsCacheGet200Response{}

// SettingsCacheGet200Response struct for SettingsCacheGet200Response
type SettingsCacheGet200Response struct {
	ImageCache *SettingsCacheGet200ResponseImageCache `json:"imageCache,omitempty"`
	ApiCaches []SettingsCacheGet200ResponseApiCachesInner `json:"apiCaches,omitempty"`
}

// NewSettingsCacheGet200Response instantiates a new SettingsCacheGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsCacheGet200Response() *SettingsCacheGet200Response {
	this := SettingsCacheGet200Response{}
	return &this
}

// NewSettingsCacheGet200ResponseWithDefaults instantiates a new SettingsCacheGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsCacheGet200ResponseWithDefaults() *SettingsCacheGet200Response {
	this := SettingsCacheGet200Response{}
	return &this
}

// GetImageCache returns the ImageCache field value if set, zero value otherwise.
func (o *SettingsCacheGet200Response) GetImageCache() SettingsCacheGet200ResponseImageCache {
	if o == nil || IsNil(o.ImageCache) {
		var ret SettingsCacheGet200ResponseImageCache
		return ret
	}
	return *o.ImageCache
}

// GetImageCacheOk returns a tuple with the ImageCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200Response) GetImageCacheOk() (*SettingsCacheGet200ResponseImageCache, bool) {
	if o == nil || IsNil(o.ImageCache) {
		return nil, false
	}
	return o.ImageCache, true
}

// HasImageCache returns a boolean if a field has been set.
func (o *SettingsCacheGet200Response) HasImageCache() bool {
	if o != nil && !IsNil(o.ImageCache) {
		return true
	}

	return false
}

// SetImageCache gets a reference to the given SettingsCacheGet200ResponseImageCache and assigns it to the ImageCache field.
func (o *SettingsCacheGet200Response) SetImageCache(v SettingsCacheGet200ResponseImageCache) {
	o.ImageCache = &v
}

// GetApiCaches returns the ApiCaches field value if set, zero value otherwise.
func (o *SettingsCacheGet200Response) GetApiCaches() []SettingsCacheGet200ResponseApiCachesInner {
	if o == nil || IsNil(o.ApiCaches) {
		var ret []SettingsCacheGet200ResponseApiCachesInner
		return ret
	}
	return o.ApiCaches
}

// GetApiCachesOk returns a tuple with the ApiCaches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200Response) GetApiCachesOk() ([]SettingsCacheGet200ResponseApiCachesInner, bool) {
	if o == nil || IsNil(o.ApiCaches) {
		return nil, false
	}
	return o.ApiCaches, true
}

// HasApiCaches returns a boolean if a field has been set.
func (o *SettingsCacheGet200Response) HasApiCaches() bool {
	if o != nil && !IsNil(o.ApiCaches) {
		return true
	}

	return false
}

// SetApiCaches gets a reference to the given []SettingsCacheGet200ResponseApiCachesInner and assigns it to the ApiCaches field.
func (o *SettingsCacheGet200Response) SetApiCaches(v []SettingsCacheGet200ResponseApiCachesInner) {
	o.ApiCaches = v
}

func (o SettingsCacheGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsCacheGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageCache) {
		toSerialize["imageCache"] = o.ImageCache
	}
	if !IsNil(o.ApiCaches) {
		toSerialize["apiCaches"] = o.ApiCaches
	}
	return toSerialize, nil
}

type NullableSettingsCacheGet200Response struct {
	value *SettingsCacheGet200Response
	isSet bool
}

func (v NullableSettingsCacheGet200Response) Get() *SettingsCacheGet200Response {
	return v.value
}

func (v *NullableSettingsCacheGet200Response) Set(val *SettingsCacheGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsCacheGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsCacheGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsCacheGet200Response(val *SettingsCacheGet200Response) *NullableSettingsCacheGet200Response {
	return &NullableSettingsCacheGet200Response{value: val, isSet: true}
}

func (v NullableSettingsCacheGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsCacheGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


