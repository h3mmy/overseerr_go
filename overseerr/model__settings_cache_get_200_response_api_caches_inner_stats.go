/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SettingsCacheGet200ResponseApiCachesInnerStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsCacheGet200ResponseApiCachesInnerStats{}

// SettingsCacheGet200ResponseApiCachesInnerStats struct for SettingsCacheGet200ResponseApiCachesInnerStats
type SettingsCacheGet200ResponseApiCachesInnerStats struct {
	Hits *float32 `json:"hits,omitempty"`
	Misses *float32 `json:"misses,omitempty"`
	Keys *float32 `json:"keys,omitempty"`
	Ksize *float32 `json:"ksize,omitempty"`
	Vsize *float32 `json:"vsize,omitempty"`
}

// NewSettingsCacheGet200ResponseApiCachesInnerStats instantiates a new SettingsCacheGet200ResponseApiCachesInnerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsCacheGet200ResponseApiCachesInnerStats() *SettingsCacheGet200ResponseApiCachesInnerStats {
	this := SettingsCacheGet200ResponseApiCachesInnerStats{}
	return &this
}

// NewSettingsCacheGet200ResponseApiCachesInnerStatsWithDefaults instantiates a new SettingsCacheGet200ResponseApiCachesInnerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsCacheGet200ResponseApiCachesInnerStatsWithDefaults() *SettingsCacheGet200ResponseApiCachesInnerStats {
	this := SettingsCacheGet200ResponseApiCachesInnerStats{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetHits() float32 {
	if o == nil || IsNil(o.Hits) {
		var ret float32
		return ret
	}
	return *o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetHitsOk() (*float32, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given float32 and assigns it to the Hits field.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) SetHits(v float32) {
	o.Hits = &v
}

// GetMisses returns the Misses field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetMisses() float32 {
	if o == nil || IsNil(o.Misses) {
		var ret float32
		return ret
	}
	return *o.Misses
}

// GetMissesOk returns a tuple with the Misses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetMissesOk() (*float32, bool) {
	if o == nil || IsNil(o.Misses) {
		return nil, false
	}
	return o.Misses, true
}

// HasMisses returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) HasMisses() bool {
	if o != nil && !IsNil(o.Misses) {
		return true
	}

	return false
}

// SetMisses gets a reference to the given float32 and assigns it to the Misses field.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) SetMisses(v float32) {
	o.Misses = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetKeys() float32 {
	if o == nil || IsNil(o.Keys) {
		var ret float32
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetKeysOk() (*float32, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given float32 and assigns it to the Keys field.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) SetKeys(v float32) {
	o.Keys = &v
}

// GetKsize returns the Ksize field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetKsize() float32 {
	if o == nil || IsNil(o.Ksize) {
		var ret float32
		return ret
	}
	return *o.Ksize
}

// GetKsizeOk returns a tuple with the Ksize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetKsizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Ksize) {
		return nil, false
	}
	return o.Ksize, true
}

// HasKsize returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) HasKsize() bool {
	if o != nil && !IsNil(o.Ksize) {
		return true
	}

	return false
}

// SetKsize gets a reference to the given float32 and assigns it to the Ksize field.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) SetKsize(v float32) {
	o.Ksize = &v
}

// GetVsize returns the Vsize field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetVsize() float32 {
	if o == nil || IsNil(o.Vsize) {
		var ret float32
		return ret
	}
	return *o.Vsize
}

// GetVsizeOk returns a tuple with the Vsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) GetVsizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Vsize) {
		return nil, false
	}
	return o.Vsize, true
}

// HasVsize returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) HasVsize() bool {
	if o != nil && !IsNil(o.Vsize) {
		return true
	}

	return false
}

// SetVsize gets a reference to the given float32 and assigns it to the Vsize field.
func (o *SettingsCacheGet200ResponseApiCachesInnerStats) SetVsize(v float32) {
	o.Vsize = &v
}

func (o SettingsCacheGet200ResponseApiCachesInnerStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsCacheGet200ResponseApiCachesInnerStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Misses) {
		toSerialize["misses"] = o.Misses
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Ksize) {
		toSerialize["ksize"] = o.Ksize
	}
	if !IsNil(o.Vsize) {
		toSerialize["vsize"] = o.Vsize
	}
	return toSerialize, nil
}

type NullableSettingsCacheGet200ResponseApiCachesInnerStats struct {
	value *SettingsCacheGet200ResponseApiCachesInnerStats
	isSet bool
}

func (v NullableSettingsCacheGet200ResponseApiCachesInnerStats) Get() *SettingsCacheGet200ResponseApiCachesInnerStats {
	return v.value
}

func (v *NullableSettingsCacheGet200ResponseApiCachesInnerStats) Set(val *SettingsCacheGet200ResponseApiCachesInnerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsCacheGet200ResponseApiCachesInnerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsCacheGet200ResponseApiCachesInnerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsCacheGet200ResponseApiCachesInnerStats(val *SettingsCacheGet200ResponseApiCachesInnerStats) *NullableSettingsCacheGet200ResponseApiCachesInnerStats {
	return &NullableSettingsCacheGet200ResponseApiCachesInnerStats{value: val, isSet: true}
}

func (v NullableSettingsCacheGet200ResponseApiCachesInnerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsCacheGet200ResponseApiCachesInnerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


