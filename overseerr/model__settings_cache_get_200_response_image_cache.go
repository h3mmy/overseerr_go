/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"encoding/json"
)

// checks if the SettingsCacheGet200ResponseImageCache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsCacheGet200ResponseImageCache{}

// SettingsCacheGet200ResponseImageCache struct for SettingsCacheGet200ResponseImageCache
type SettingsCacheGet200ResponseImageCache struct {
	Tmdb *SettingsCacheGet200ResponseImageCacheTmdb `json:"tmdb,omitempty"`
}

// NewSettingsCacheGet200ResponseImageCache instantiates a new SettingsCacheGet200ResponseImageCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsCacheGet200ResponseImageCache() *SettingsCacheGet200ResponseImageCache {
	this := SettingsCacheGet200ResponseImageCache{}
	return &this
}

// NewSettingsCacheGet200ResponseImageCacheWithDefaults instantiates a new SettingsCacheGet200ResponseImageCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsCacheGet200ResponseImageCacheWithDefaults() *SettingsCacheGet200ResponseImageCache {
	this := SettingsCacheGet200ResponseImageCache{}
	return &this
}

// GetTmdb returns the Tmdb field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseImageCache) GetTmdb() SettingsCacheGet200ResponseImageCacheTmdb {
	if o == nil || IsNil(o.Tmdb) {
		var ret SettingsCacheGet200ResponseImageCacheTmdb
		return ret
	}
	return *o.Tmdb
}

// GetTmdbOk returns a tuple with the Tmdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseImageCache) GetTmdbOk() (*SettingsCacheGet200ResponseImageCacheTmdb, bool) {
	if o == nil || IsNil(o.Tmdb) {
		return nil, false
	}
	return o.Tmdb, true
}

// HasTmdb returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseImageCache) HasTmdb() bool {
	if o != nil && !IsNil(o.Tmdb) {
		return true
	}

	return false
}

// SetTmdb gets a reference to the given SettingsCacheGet200ResponseImageCacheTmdb and assigns it to the Tmdb field.
func (o *SettingsCacheGet200ResponseImageCache) SetTmdb(v SettingsCacheGet200ResponseImageCacheTmdb) {
	o.Tmdb = &v
}

func (o SettingsCacheGet200ResponseImageCache) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsCacheGet200ResponseImageCache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tmdb) {
		toSerialize["tmdb"] = o.Tmdb
	}
	return toSerialize, nil
}

type NullableSettingsCacheGet200ResponseImageCache struct {
	value *SettingsCacheGet200ResponseImageCache
	isSet bool
}

func (v NullableSettingsCacheGet200ResponseImageCache) Get() *SettingsCacheGet200ResponseImageCache {
	return v.value
}

func (v *NullableSettingsCacheGet200ResponseImageCache) Set(val *SettingsCacheGet200ResponseImageCache) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsCacheGet200ResponseImageCache) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsCacheGet200ResponseImageCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsCacheGet200ResponseImageCache(val *SettingsCacheGet200ResponseImageCache) *NullableSettingsCacheGet200ResponseImageCache {
	return &NullableSettingsCacheGet200ResponseImageCache{value: val, isSet: true}
}

func (v NullableSettingsCacheGet200ResponseImageCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsCacheGet200ResponseImageCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
