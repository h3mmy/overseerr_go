/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SettingsCacheGet200ResponseImageCacheTmdb type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsCacheGet200ResponseImageCacheTmdb{}

// SettingsCacheGet200ResponseImageCacheTmdb struct for SettingsCacheGet200ResponseImageCacheTmdb
type SettingsCacheGet200ResponseImageCacheTmdb struct {
	Size *float32 `json:"size,omitempty"`
	ImageCount *float32 `json:"imageCount,omitempty"`
}

// NewSettingsCacheGet200ResponseImageCacheTmdb instantiates a new SettingsCacheGet200ResponseImageCacheTmdb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsCacheGet200ResponseImageCacheTmdb() *SettingsCacheGet200ResponseImageCacheTmdb {
	this := SettingsCacheGet200ResponseImageCacheTmdb{}
	return &this
}

// NewSettingsCacheGet200ResponseImageCacheTmdbWithDefaults instantiates a new SettingsCacheGet200ResponseImageCacheTmdb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsCacheGet200ResponseImageCacheTmdbWithDefaults() *SettingsCacheGet200ResponseImageCacheTmdb {
	this := SettingsCacheGet200ResponseImageCacheTmdb{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) GetSize() float32 {
	if o == nil || IsNil(o.Size) {
		var ret float32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) GetSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given float32 and assigns it to the Size field.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) SetSize(v float32) {
	o.Size = &v
}

// GetImageCount returns the ImageCount field value if set, zero value otherwise.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) GetImageCount() float32 {
	if o == nil || IsNil(o.ImageCount) {
		var ret float32
		return ret
	}
	return *o.ImageCount
}

// GetImageCountOk returns a tuple with the ImageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) GetImageCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ImageCount) {
		return nil, false
	}
	return o.ImageCount, true
}

// HasImageCount returns a boolean if a field has been set.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) HasImageCount() bool {
	if o != nil && !IsNil(o.ImageCount) {
		return true
	}

	return false
}

// SetImageCount gets a reference to the given float32 and assigns it to the ImageCount field.
func (o *SettingsCacheGet200ResponseImageCacheTmdb) SetImageCount(v float32) {
	o.ImageCount = &v
}

func (o SettingsCacheGet200ResponseImageCacheTmdb) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsCacheGet200ResponseImageCacheTmdb) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.ImageCount) {
		toSerialize["imageCount"] = o.ImageCount
	}
	return toSerialize, nil
}

type NullableSettingsCacheGet200ResponseImageCacheTmdb struct {
	value *SettingsCacheGet200ResponseImageCacheTmdb
	isSet bool
}

func (v NullableSettingsCacheGet200ResponseImageCacheTmdb) Get() *SettingsCacheGet200ResponseImageCacheTmdb {
	return v.value
}

func (v *NullableSettingsCacheGet200ResponseImageCacheTmdb) Set(val *SettingsCacheGet200ResponseImageCacheTmdb) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsCacheGet200ResponseImageCacheTmdb) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsCacheGet200ResponseImageCacheTmdb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsCacheGet200ResponseImageCacheTmdb(val *SettingsCacheGet200ResponseImageCacheTmdb) *NullableSettingsCacheGet200ResponseImageCacheTmdb {
	return &NullableSettingsCacheGet200ResponseImageCacheTmdb{value: val, isSet: true}
}

func (v NullableSettingsCacheGet200ResponseImageCacheTmdb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsCacheGet200ResponseImageCacheTmdb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


