/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SettingsSonarrTestPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsSonarrTestPostRequest{}

// SettingsSonarrTestPostRequest struct for SettingsSonarrTestPostRequest
type SettingsSonarrTestPostRequest struct {
	Hostname string  `json:"hostname"`
	Port     float32 `json:"port"`
	ApiKey   string  `json:"apiKey"`
	UseSsl   bool    `json:"useSsl"`
	BaseUrl  *string `json:"baseUrl,omitempty"`
}

type _SettingsSonarrTestPostRequest SettingsSonarrTestPostRequest

// NewSettingsSonarrTestPostRequest instantiates a new SettingsSonarrTestPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsSonarrTestPostRequest(hostname string, port float32, apiKey string, useSsl bool) *SettingsSonarrTestPostRequest {
	this := SettingsSonarrTestPostRequest{}
	this.Hostname = hostname
	this.Port = port
	this.ApiKey = apiKey
	this.UseSsl = useSsl
	return &this
}

// NewSettingsSonarrTestPostRequestWithDefaults instantiates a new SettingsSonarrTestPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsSonarrTestPostRequestWithDefaults() *SettingsSonarrTestPostRequest {
	this := SettingsSonarrTestPostRequest{}
	return &this
}

// GetHostname returns the Hostname field value
func (o *SettingsSonarrTestPostRequest) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *SettingsSonarrTestPostRequest) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *SettingsSonarrTestPostRequest) SetHostname(v string) {
	o.Hostname = v
}

// GetPort returns the Port field value
func (o *SettingsSonarrTestPostRequest) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SettingsSonarrTestPostRequest) GetPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SettingsSonarrTestPostRequest) SetPort(v float32) {
	o.Port = v
}

// GetApiKey returns the ApiKey field value
func (o *SettingsSonarrTestPostRequest) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *SettingsSonarrTestPostRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *SettingsSonarrTestPostRequest) SetApiKey(v string) {
	o.ApiKey = v
}

// GetUseSsl returns the UseSsl field value
func (o *SettingsSonarrTestPostRequest) GetUseSsl() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseSsl
}

// GetUseSslOk returns a tuple with the UseSsl field value
// and a boolean to check if the value has been set.
func (o *SettingsSonarrTestPostRequest) GetUseSslOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseSsl, true
}

// SetUseSsl sets field value
func (o *SettingsSonarrTestPostRequest) SetUseSsl(v bool) {
	o.UseSsl = v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *SettingsSonarrTestPostRequest) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsSonarrTestPostRequest) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *SettingsSonarrTestPostRequest) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *SettingsSonarrTestPostRequest) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

func (o SettingsSonarrTestPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsSonarrTestPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostname"] = o.Hostname
	toSerialize["port"] = o.Port
	toSerialize["apiKey"] = o.ApiKey
	toSerialize["useSsl"] = o.UseSsl
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	return toSerialize, nil
}

func (o *SettingsSonarrTestPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostname",
		"port",
		"apiKey",
		"useSsl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettingsSonarrTestPostRequest := _SettingsSonarrTestPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettingsSonarrTestPostRequest)

	if err != nil {
		return err
	}

	*o = SettingsSonarrTestPostRequest(varSettingsSonarrTestPostRequest)

	return err
}

type NullableSettingsSonarrTestPostRequest struct {
	value *SettingsSonarrTestPostRequest
	isSet bool
}

func (v NullableSettingsSonarrTestPostRequest) Get() *SettingsSonarrTestPostRequest {
	return v.value
}

func (v *NullableSettingsSonarrTestPostRequest) Set(val *SettingsSonarrTestPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsSonarrTestPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsSonarrTestPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsSonarrTestPostRequest(val *SettingsSonarrTestPostRequest) *NullableSettingsSonarrTestPostRequest {
	return &NullableSettingsSonarrTestPostRequest{value: val, isSet: true}
}

func (v NullableSettingsSonarrTestPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsSonarrTestPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
