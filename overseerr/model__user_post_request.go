/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overseerr_go

import (
	"encoding/json"
)

// checks if the UserPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPostRequest{}

// UserPostRequest struct for UserPostRequest
type UserPostRequest struct {
	Email       *string  `json:"email,omitempty"`
	Username    *string  `json:"username,omitempty"`
	Permissions *float32 `json:"permissions,omitempty"`
}

// NewUserPostRequest instantiates a new UserPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPostRequest() *UserPostRequest {
	this := UserPostRequest{}
	return &this
}

// NewUserPostRequestWithDefaults instantiates a new UserPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPostRequestWithDefaults() *UserPostRequest {
	this := UserPostRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserPostRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserPostRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserPostRequest) SetEmail(v string) {
	o.Email = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserPostRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserPostRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserPostRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UserPostRequest) GetPermissions() float32 {
	if o == nil || IsNil(o.Permissions) {
		var ret float32
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPostRequest) GetPermissionsOk() (*float32, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UserPostRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given float32 and assigns it to the Permissions field.
func (o *UserPostRequest) SetPermissions(v float32) {
	o.Permissions = &v
}

func (o UserPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableUserPostRequest struct {
	value *UserPostRequest
	isSet bool
}

func (v NullableUserPostRequest) Get() *UserPostRequest {
	return v.value
}

func (v *NullableUserPostRequest) Set(val *UserPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPostRequest(val *UserPostRequest) *NullableUserPostRequest {
	return &NullableUserPostRequest{value: val, isSet: true}
}

func (v NullableUserPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
