/*
Overseerr API

Testing RequestAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package overseerr_go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/h3mmy/overseerr_go"
)

func Test_overseerr_go_RequestAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RequestAPIService RequestCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RequestAPI.RequestCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RequestAPI.RequestGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RequestAPI.RequestPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestRequestIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		httpRes, err := apiClient.RequestAPI.RequestRequestIdDelete(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestRequestIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.RequestAPI.RequestRequestIdGet(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestRequestIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.RequestAPI.RequestRequestIdPut(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestRequestIdRetryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.RequestAPI.RequestRequestIdRetryPost(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RequestAPIService RequestRequestIdStatusPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var status string

		resp, httpRes, err := apiClient.RequestAPI.RequestRequestIdStatusPost(context.Background(), requestId, status).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
