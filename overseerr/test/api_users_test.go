/*
Overseerr API

Testing UsersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package overseerr_go

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_overseerr_go_UsersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersAPIService AuthMeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.AuthMeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AuthResetPasswordGuidPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guid string

		resp, httpRes, err := apiClient.UsersAPI.AuthResetPasswordGuidPost(context.Background(), guid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService AuthResetPasswordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.AuthResetPasswordPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService SettingsPlexUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.SettingsPlexUsersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.UserGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserImportFromPlexPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.UserImportFromPlexPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.UserPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UsersAPI.UserPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserRegisterPushSubscriptionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UsersAPI.UserRegisterPushSubscriptionPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdDelete(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdPut(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdQuotaGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdRequestsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdRequestsGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsMainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsMainGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsMainPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsMainPost(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsNotificationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsNotificationsGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsNotificationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsNotificationsPost(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsPasswordGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsPasswordGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsPasswordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		httpRes, err := apiClient.UsersAPI.UserUserIdSettingsPasswordPost(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsPermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsPermissionsGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdSettingsPermissionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdSettingsPermissionsPost(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdWatchDataGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdWatchDataGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersAPIService UserUserIdWatchlistGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UsersAPI.UserUserIdWatchlistGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
